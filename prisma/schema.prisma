generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int              @id @default(autoincrement())
  slug        String           @unique
  price Decimal @default(0)
  active Boolean @default(false)
  sex String @default("uni")
  currencySymbol String?        
  currency Currency? @relation(fields: [currencySymbol], references: [symbol])
  collectionId Int?
  collection  Collection?      @relation(fields: [collectionId], references: [id])
  images      ProductsImages[]
  tags        Tag[]
  variants    Variant[]
  categories  Category[]       @relation("CategoryToProduct")
  fields      Field[]          @relation("FieldToProduct")
  @@index([slug])
}

model Category {
  id       Int        @id @default(autoincrement())
  parentId Int?
  mainSliderImages Image[]
  isMain Boolean @default(false)
  parent   Category?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)
  childs   Category[] @relation("parent")
  fields   Field[]    @relation("CategoryToField")
  products Product[]  @relation("CategoryToProduct")
}

model Tag {
  tag      String         @id
  products Product[]
}

model Language {
  id     Int     @id @default(autoincrement())
  name String @default("")
  symbol String  @unique
  fields Field[]
  imageId  Int?
  image    Image?     @relation(fields: [imageId], references: [id])
}

model Image {
  id       Int              @id @default(autoincrement())
  url      String
  products ProductsImages[]
  languages Language[]
  currencies Currency[]
  variants Variant[]
  categories Category[]
}

model Field {
  id          Int          @id @default(autoincrement())
  fieldName   String
  fieldValue  String
  languageId  Int
  language    Language     @relation(fields: [languageId], references: [id])
  categories  Category[]   @relation("CategoryToField")
  collections Collection[] @relation("CollectionToField")
  products    Product[]    @relation("FieldToProduct")
}

model Collection {
  id       Int       @id @default(autoincrement())
  products Product[]
  fields   Field[]   @relation("CollectionToField")
}

model Currency {
  symbol String @id
  products Product[]
  imageId  Int?
  image    Image?     @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model ProductsImages {
  productId Int
  imageId   Int
  number    Int
  isMain    Boolean @default(false)
  image       Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, imageId])
}

model OauthAccessToken {
  id                    String    @id
  userId                String
  applicationId         String
  token                 String    @unique
  refreshToken          String?   @unique
  tokenExpiresAt        DateTime? @db.Timestamptz(6)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(6)
  scopes                Json      @default("[]")
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  user                  User      @relation(fields: [userId], references: [id])

  @@index([applicationId])
  @@index([userId])
}

model User {
  id                String             @id
  name              String
  email             String             @unique
  encryptedPassword String
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime           @default(now()) @updatedAt @db.Timestamptz(6)
  accessTokens      OauthAccessToken[]
  identities        UserIdentity[]
}

model UserIdentity {
  id        String   @id
  userId    String
  provider  String
  uid       String
  name      String?
  email     String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, uid])
  @@index([userId])
}

model Variant {
  id           Int           @id @default(autoincrement())
  productId    Int
  size         String
  color        String
  images Image[]
  count Int @default(0)
  transactions Transaction[]
  product      Product       @relation(fields: [productId], references: [id])
  @@unique([size,color])
}
model VariantTemplate{
  id Int @id @default(autoincrement())
  size String
  color String 
}

model Transaction {
  id        Int      @id @default(autoincrement())
  variantId Int
  userId    String
  status    String
  amount    Decimal
  entryDate DateTime
  startDate DateTime
  endDate   DateTime
  details   String
  variant   Variant  @relation(fields: [variantId], references: [id])
}
