generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}
model Sessions{
  session String @id
}
model Product {
  id          Int              @id @default(autoincrement())
  slug        String           @unique
  price Decimal @default(0)
  basePrice Decimal @default(0)
  active Boolean @default(false)
  sex String @default("uni")
  views Decimal @default(0)
  wans Decimal @default(0)
  currencySymbol String?        
  currency Currency? @relation(fields: [currencySymbol], references: [symbol])
  collectionId Int?
  collection  Collection?      @relation(fields: [collectionId], references: [id])
  images      ProductsImages[]
  deleted Boolean @default(false)
  tags        Tag[]
  variants    Variant[]
  categories  Category[]       @relation("CategoryToProduct")
  fields      Field[]          @relation("FieldToProduct")
  wishLists WishList[]
  @@index([slug])
}

model Category {
  id       Int        @id @default(autoincrement())
  parentId Int?
  mainSliderImages Image[]
  isMain Boolean @default(false)
  slug String @unique @default("")
  parent   Category?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)
  childs   Category[] @relation("parent")
  fields   Field[]    @relation("CategoryToField")
  products Product[]  @relation("CategoryToProduct")
}

model Tag {
  tag      String         @id
  products Product[]
}

model Language {
  id     Int     @id @default(autoincrement())
  name String @default("")
  symbol String  @unique
  fields Field[]
  imageId  Int?
  image    Image?     @relation(fields: [imageId], references: [id])
}

model Image {
  id       Int              @id @default(autoincrement())
  url      String
  products ProductsImages[]
  languages Language[]
  currencies Currency[]
  variants Variant[]
  categories Category[]
}

model Field {
  id          Int          @id @default(autoincrement())
  fieldName   String
  fieldValue  String
  languageId  Int
  language    Language     @relation(fields: [languageId], references: [id])
  categories  Category[]   @relation("CategoryToField")
  collections Collection[] @relation("CollectionToField")
  products    Product[]    @relation("FieldToProduct")
  @@index([fieldName,fieldValue])
}

model Collection {
  id       Int       @id @default(autoincrement())
  products Product[]
  fields   Field[]   @relation("CollectionToField")
}

model Currency {
  symbol String @id
  products Product[]
  imageId  Int?
  image    Image?     @relation(fields: [imageId], references: [id], onDelete: Cascade)
}

model ProductsImages {
  productId Int
  imageId   Int
  number    Int
  isMain    Boolean @default(false)
  image       Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, imageId])
}



model User{
  @@map(name: "users")

  id String  @id @default(uuid())
  username String?  @db.VarChar(255)
  email String @unique
  photo String? @default("default.png")
  phone String?
  firstName String?
  lastName String?
  verified Boolean? @default(false) 
  sex String @default("")
  country String @default("")
  password String
  role RoleEnumType? @default(user)
  status StatusEnumType? @default(pending)
  verificationCode String? @db.Text @unique
  addresses Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  checkouts Checkout[] 
  cartId String? @unique
  cart Cart? @relation(fields: [cartId], references: [id])
  wishlistId String? @unique
  wishList WishList? @relation(fields: [wishlistId], references: [id])
  @@unique([email, verificationCode])
  @@index([email, verificationCode])
}

enum TokenType {
  confirm
  order
  forgot
}
model Token {
  token String @id
  type TokenType
  objectId String
}

enum StatusEnumType {
  pending
  active
  banned
}
enum RoleEnumType {
  user
  admin
}

model Cart{
  id           String  @id @default(uuid())
  user User?
  variants CartVariants[]
}
model CartVariants{
  cartId   String
  count     Int @default(1)
  variantId   Int
  cart       Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([variantId, cartId])
}
model WishList{
  id            String  @id @default(uuid())
  user User? 
  products Product[]
}

model Variant {
  id           Int           @id @default(autoincrement())
  productId    Int
  size         String
  color        String
  colorText        String?
  images        Image[]
  count Int @default(0)
  transactions Transaction[]
  product      Product       @relation(fields: [productId], references: [id])
  carts CartVariants[]
  orders CheckoutVariants[]
  deleted Boolean @default(false)
}

model VariantTemplate{
  id Int @id @default(autoincrement())
  size String
  color String 
}

enum DeliveryType {
  pickup
  courier
  parcel
}

enum PaymentType {
  cash
  card
  online
}

model Address{
  id        String      @id @default(uuid())
  user User? @relation(fields: [userId], references: [id])
  userId String? 
  mask String
  fields AddressFields[]
  orders Checkout[]
}

model AddressFields{
  id        Int      @id @default(autoincrement())
  type String
  addressId String
  address Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  firstName String
  lastName String
  company String
  streetNumber String
  apartments String
  zipCode String
  city String
  country String
}
enum CheckoutStatus {
  preprocess
  pending
  completed
  declined
}
model CheckoutInfo {
  id    Int    @id @default(autoincrement())
  email String 
  phone String
  firstName String?
  lastName String?
  checkout Checkout[]
}
model Checkout {
  id        String      @id @default(uuid())
  status CheckoutStatus 
  orderId Int @default(autoincrement())
  deliveryType DeliveryType @default(pickup)
  paymentType PaymentType @default(cash)
  transactionId Int?
  infoId Int?
  info CheckoutInfo? @relation(fields: [infoId], references: [id])
  userId String?
  user User? @relation(fields: [userId], references: [id])
  variants CheckoutVariants[]
  orderDate DateTime @default(now())
  addressId String? 
  address Address? @relation(fields: [addressId], references: [id])
}

model CheckoutVariants {
  checkoutId   String
  count     Int @default(1)
  variantId   Int

  checkout  Checkout   @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([checkoutId, variantId])
}

model Transaction {
  id        Int      @id @default(autoincrement())
  variantId Int
  userId    String
  status    String
  amount    Decimal
  entryDate DateTime
  startDate DateTime
  endDate   DateTime
  details   String
  variant   Variant  @relation(fields: [variantId], references: [id])
}
